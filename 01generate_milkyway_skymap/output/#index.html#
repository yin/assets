<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Environment Map preview</title>
    <link href="https://fonts.googleapis.com/css?family=Ubuntu+Mono" rel="stylesheet">
    <style>
      html, body {
        padding: 0;
        margin: 0;
      }
      #hud {
        font-family: 'Ubuntu Mono', monospace;
        position:absolute;
        color:white;
      }
      #hud input[type="text"] {
        font-family: 'Ubuntu Mono', monospace;
        color:white;
        border-width: 0 0 1px 0;
        border-color: white;
        background: none;
        width: 4em;
      }
    </style>
  </head>
  <body>
    <script id="vs_star_surface" type="x-shader/x-vertex">
			precision mediump float;
			precision mediump int;
			uniform mat4 modelViewMatrix; // optional
			uniform mat4 projectionMatrix; // optional
			attribute vec3 position;
			attribute vec4 normal;
			varying vec3 vPosition;
			varying vec4 vNormal;
			void main()	{
				vPosition = position;
			vNormal = normal;
				gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			}
    </script>

    <script id="fs_star_surface" type="x-shader/x-fragment">
    
			precision mediump float;
			precision mediump int;
			uniform float time;
			uniform vec4 color;
			varying vec3 vPosition;
			varying vec4 vNormal;
			//
			// Description : Array and textureless GLSL 2D/3D/4D simplex 
			//               noise functions.
			//      Author : Ian McEwan, Ashima Arts.
			//  Maintainer : stegu
			//     Lastmod : 20110822 (ijm)
			//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
			//               Distributed under the MIT License. See LICENSE file.
			//               https://github.com/ashima/webgl-noise
			//               https://github.com/stegu/webgl-noise
			// 


			vec4 mod289(vec4 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0; }

			float mod289(float x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0; }

			vec4 permute(vec4 x) {
			return mod289(((x*34.0)+1.0)*x);
			}

			float permute(float x) {
			return mod289(((x*34.0)+1.0)*x);
			}

			vec4 taylorInvSqrt(vec4 r)
			{
			return 1.79284291400159 - 0.85373472095314 * r;
			}

			float taylorInvSqrt(float r)
			{
			return 1.79284291400159 - 0.85373472095314 * r;
			}

			vec4 grad4(float j, vec4 ip)
			{
			const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
			vec4 p,s;

			p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
			p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
			s = vec4(lessThan(p, vec4(0.0)));
			p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 

			return p;
			}
			
			// (sqrt(5) - 1)/4 = F4, used once below
			#define F4 0.309016994374947451

			float snoise(vec4 v)
			{
			const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4
                        0.276393202250021,  // 2 * G4
                        0.414589803375032,  // 3 * G4
			-0.447213595499958); // -1 + 4 * G4

			// First corner
			vec4 i  = floor(v + dot(v, vec4(F4)) );
			vec4 x0 = v -   i + dot(i, C.xxxx);

			// Other corners

			// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)
			vec4 i0;
			vec3 isX = step( x0.yzw, x0.xxx );
			vec3 isYZ = step( x0.zww, x0.yyz );
			//  i0.x = dot( isX, vec3( 1.0 ) );
			i0.x = isX.x + isX.y + isX.z;
			i0.yzw = 1.0 - isX;
			//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );
			i0.y += isYZ.x + isYZ.y;
			i0.zw += 1.0 - isYZ.xy;
			i0.z += isYZ.z;
			i0.w += 1.0 - isYZ.z;

			// i0 now contains the unique values 0,1,2,3 in each channel
			vec4 i3 = clamp( i0, 0.0, 1.0 );
			vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
			vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );

			//  x0 = x0 - 0.0 + 0.0 * C.xxxx
			//  x1 = x0 - i1  + 1.0 * C.xxxx
			//  x2 = x0 - i2  + 2.0 * C.xxxx
			//  x3 = x0 - i3  + 3.0 * C.xxxx
			//  x4 = x0 - 1.0 + 4.0 * C.xxxx
			vec4 x1 = x0 - i1 + C.xxxx;
			vec4 x2 = x0 - i2 + C.yyyy;
			vec4 x3 = x0 - i3 + C.zzzz;
			vec4 x4 = x0 + C.wwww;

			// Permutations
			i = mod289(i); 
			float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);
			vec4 j1 = permute( permute( permute( permute (
			i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
			+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
			+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
			+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));

			// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope
			// 7*7*6 = 294, which is close to the ring size 17*17 = 289.
			vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;

			vec4 p0 = grad4(j0,   ip);
			vec4 p1 = grad4(j1.x, ip);
			vec4 p2 = grad4(j1.y, ip);
			vec4 p3 = grad4(j1.z, ip);
			vec4 p4 = grad4(j1.w, ip);

			// Normalise gradients
			vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
			p0 *= norm.x;
			p1 *= norm.y;
			p2 *= norm.z;
			p3 *= norm.w;
			p4 *= taylorInvSqrt(dot(p4,p4));

			// Mix contributions from the five corners
			vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);
			vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);
			m0 = m0 * m0;
			m1 = m1 * m1;
			return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))
			+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;

			}

			void main()	{
			  float v = snoise(vec4(vPosition, time*0.05)) * 0.2 + 0.8;
			  float v2 = max(snoise(vec4(vPosition * 0.033, 0.0)) * 3.0 - 2.0, 0.0);
			  vec4 mixed = vec4(color.xyz*v, 1.0) - vec4(v2, v2, v2, 0.0);
			  
			  gl_FragColor = mixed;
			}
    </script>

        <script id="vs_billboard" type="x-shader/x-vertex">
			precision mediump float;
			precision mediump int;
			uniform mat4 modelViewMatrix; // optional
			uniform mat4 projectionMatrix; // optional
			uniform vec3 center;
			uniform vec2 size;
			attribute vec3 position; // vertex, not sprite center
			varying vec3 vPosition;
			varying vec4 vNormal;

			void main() {
			vPosition = position;
			  vec3 camera_f = vec3(
			    modelViewMatrix[0][2],
			    modelViewMatrix[1][2],
			    modelViewMatrix[2][2]);
			  vec3 camera_r = vec3(
			    modelViewMatrix[0][0],
			    modelViewMatrix[1][0],
			    modelViewMatrix[2][0]);
			  vec3 camera_u = vec3(
			    modelViewMatrix[0][1],
			    modelViewMatrix[1][1],
			    modelViewMatrix[2][1]);
			vNormal = vec4(camera_f, 1.0);
			  vec3 vertexPosition = center
			      + camera_r * position.x * size.x
			      + camera_u * position.y * size.y;
			  gl_Position = projectionMatrix * modelViewMatrix * vec4( vertexPosition, 1.0 );
			}
    </script>

    <script id="fs_billboard_hallo" type="x-shader/x-fragment">
			precision mediump float;
			precision mediump int;
			uniform float time;
			uniform float offset;
			uniform vec4 color;
			varying vec3 vPosition;
			varying vec4 vNormal;

			void main()	{
			  float d = 1.0-sqrt(vPosition.x*vPosition.x + vPosition.y*vPosition.y) * 0.01;
			  float a = atan(vPosition.y, vPosition.x);
			  d += sin(a*20.0) * 0.02;
			  d += offset;
	
	   		  vec4 mixed = vec4(color.xyz, color.w*d);
			  gl_FragColor = mixed;
			}
    </script>
    
    <script src="three.min.js"></script>
    <script src="star.js">
      
    <div id="hud">
      Temperature <input type="text" value="3700" onchange="updateTemperature(this.value);"/>K </br>
      Distance <input type="text" value="400" onchange="updateDistance(this.value);">
    </div>
    
    <script>
        // create and set up the scene, etc
        var width = window.innerWidth;
        var height = window.innerHeight;
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(35, width / height, 1, 150000);
        var renderer = new THREE.WebGLRenderer({antialias:true});
        var time = 0;
        var ORIGIN = new THREE.Vector3();

        // urls of the images,
        // one per half axis
        var urls = [
              'pos-x.jpg',
              'neg-x.jpg',
              'pos-y.jpg',
              'neg-y.jpg',
              'pos-z.jpg',
              'neg-z.jpg'
            ];

	var distance = 400;
	var star_temp = 3700;
	var star_radius = 60.0;
	var star_color = kelvinToRGB(star_temp)
	star_color[3] = 0.5;
	var corona_radius = 250.0;

        // wrap it up into the object that we need
        var cubemap = (new THREE.CubeTextureLoader()).load(urls);
        
      
        // set the format, likely RGB
        // unless you've gone crazy
        cubemap.format = THREE.RGBFormat;

        scene.background = cubemap;

        var ambient = new THREE.AmbientLight( 0xffffff );
        scene.add(ambient);

        var pointLight = new THREE.PointLight( 0xffffff, 2 );
        scene.add( pointLight );

	
	var coronaMaterial = new THREE.RawShaderMaterial( {
	  uniforms: {
            time: { value: 1.0 },
	    offset: { value: star_radius/corona_radius },
	    size: { value: [ 1.0, 1.0 ] },
	    center: { value: star.position.toArray() },
	    color: { value: star_color },
          },
          vertexShader: document.getElementById( 'vs_billboard' ).textContent,
          fragmentShader: document.getElementById( 'fs_billboard_hallo' ).textContent,
          side: THREE.DoubleSide,
          transparent: true
        } );

	var corona = new THREE.Mesh(
	  new THREE.PlaneGeometry(corona_radius, corona_radius),
	  coronaMaterial
	);
	
        scene.add(star);
	scene.add(corona);
        scene.add(camera);

        renderer.setSize(width, height);
        document.body.appendChild(renderer.domElement);

        function animate() {
          var time = performance.now();
          var star = scene.children[ 2 ];
	  var corona = scene.children[ 3 ];
	
          star.material.uniforms.time.value = time * 0.005;
          
          camera.position.x = Math.sin(time * 0.0001) * distance;
          camera.position.z = Math.cos(time * 0.0001) * distance;
          camera.lookAt(ORIGIN);
	
          renderer.render(scene,camera);
          requestAnimationFrame(animate);
        }

	function kelvinToRGB (temp, out) {
	if (!Array.isArray(out)) {
	out = [0, 0, 0]
	}

	temp = temp / 100
	var red, blue, green

	if (temp <= 66) {
		    red = 255
		    } else {
		    red = temp - 60
		    red = 329.698727466 * Math.pow(red, -0.1332047592)
		    if (red < 0) {
			      red = 0
			      }
			      if (red > 255) {
		    red = 255
		    }
		    }

		    if (temp <= 66) {
				green = temp
				green = 99.4708025861 * Math.log(green) - 161.1195681661
				if (green < 0) {
					    green = 0
					    }
					    if (green > 255) {
				green = 255
				}
				} else {
				green = temp - 60
				green = 288.1221695283 * Math.pow(green, -0.0755148492)
				if (green < 0) {
					    green = 0
					    }
					    if (green > 255) {
				green = 255
				}
				}

				if (temp >= 66) {
		    blue = 255
		    } else {
		    if (temp <= 19) {
				blue = 0
				} else {
				blue = temp - 10
				blue = 138.5177312231 * Math.log(blue) - 305.0447927307
				if (blue < 0) {
					   blue = 0
					   }
					   if (blue > 255) {
				blue = 255
				}
				}
				}

				out[0] = red / 256.0 * ((star_temp - 800.0) / 2000.0 );
		out[1] = green / 256.0 * ((star_temp - 800.0) / 2000.0 );
		out[2] = blue / 256.0 * ((star_temp - 800.0) / 2000.0 );
		out[3] = 1.0;
		return out
	}

	function updateDistance(d) {
				distance = d;
	}

	function updateTemperature(temp) {
				star_temp = temp;
				star_color = kelvinToRGB(star_temp)
				var star = scene.children[ 2 ];
				var corona = scene.children[ 3 ];
				star.material.uniforms.color.value = Array.from(star_color);
				star.material.uniforms.color.needsUpdate = true;
				star_color[3] = 0.5;
				corona.material.uniforms.color.value = star_color;
				corona.material.uniforms.color.needsUpdate = true
console.log(star_color)
	}
        requestAnimationFrame(animate);
    </script>
  </body>
</html>
